# slurm.conf file 
# Put this file on all nodes of your cluster.
# See the slurm.conf man page for more information.
#
{# Jinja2 Macro's #}
{# Conditional Parameter macro that shows only when parameter is defined #}
{% macro cp(key, value) -%}
    {% if value is defined %}{{ key }}={{ value }}{% endif %}
{%- endmacro %}
{# End of macro's #}
Clustername={{ slurm_cluster_name }}
ControlMachine={{ slurm_control_machine }}
{{ cp('BackupController', slurm_backup_controller) }}
# 
SlurmUser=slurm
SlurmctldPort=6817
SlurmdPort=6818
AuthType=auth/munge
ProctrackType=proctrack/cgroup
SwitchType=switch/none
CryptoType=crypto/munge
#
SlurmctldPidFile=/var/run/slurm/slurmctld.pid
SlurmdPidFile=/var/run/slurm/slurmd.pid
#
SlurmdSpoolDir=/var/spool/slurmd
StateSaveLocation=/var/spool/slurmctld
#
#JobCredentialPrivateKey=
#JobCredentialPublicCertificate=
#CheckpointType=checkpoint/none 
MpiDefault=none
ReturnToService=2
#MaxJobCount=5000 
#MaxStepCount=40000 
#MaxTasksPerNode=128 
#MaxJobId=999999 
#PluginDir= 
#PlugStackConfig= 
#PropagatePrioProcess=0 
#PropagateResourceLimits= 
#PropagateResourceLimitsExcept= 
#Prolog=
#PrologFlags= 
#PrologSlurmctld= 
#SrunEpilog=
#SrunProlog=
#TaskProlog=
#TaskEpilog=
TaskPlugin=task/cgroup
#TrackWCKey=no 
#TreeWidth= 
#TmpFS=/tmp 
#UsePAM=0 
#
# TIMERS
SlurmctldTimeout=120
SlurmdTimeout=300
InactiveLimit=0
KillWait=30
Waittime=0
MinJobAge=300
#
# SCHEDULING
SchedulerType=sched/backfill
SelectType=select/cons_res
SelectTypeParameters=CR_Core_Memory
FastSchedule=1
{{ cp('DefMemPerCPU', slurm_defmempercpu) }}
#EnforcePartLimits=NO 
#DisableRootJobs=NO 
#FirstJobId=1 
#SchedulerTimeSlice=30 
#
# JOB PRIORITY 
{{ cp('PriorityType', slurm_priority_type) }}
{{ cp('PriorityDecayHalfLife', slurm_priority_decay_half_life) }}
{{ cp('PriorityCalcPeriod', slurm_priority_calc_period) }}
{{ cp('PriorityUsageResetPeriod', slurm_priority_usage_reset_period) }}
{{ cp('PriorityFavorSmall', slurm_priority_favor_small) }}
{{ cp('PriorityMaxAge', slurm_priority_max_age) }}
{{ cp('PriorityWeightAge', slurm_priority_weight_age) }}
{{ cp('PriorityWeightAssoc', slurm_priority_weight_assoc) }}
{{ cp('PriorityWeightFairshare', slurm_priority_weight_fairshare) }}
{{ cp('PriorityWeightJobSize', slurm_priority_weight_job_size) }}
{{ cp('PriorityWeightPartition',slurm_priority_weight_partition) }}
{{ cp('PriorityWeightQOS', slurm_priority_weight_qos) }}
{{ cp('PriorityWeightTRES', slurm_priority_weight_tres) }}
{{ cp('PriorityFlags', slurm_priority_flags) }}
#
# LOGGING & DEBUGGING
SlurmctldDebug=3
SlurmctldLogFile=/var/log/slurm/slurmctld.log
SlurmdDebug=3
SlurmdLogFile=/var/log/slurm/slurmd.log

#JobCompHost=
#JobCompLoc=/var/log/slurm/slurm_jobcomp.log
#JobCompPass=
#JobCompPort=
#JobCompType=jobcomp/filetxt
#JobCompUser=
#JobContainerType=job_container/none 

#
# ACCOUNTING 
{% if slurm_dbd_machine is defined %}
AccountingStorageHost={{ slurm_dbd_machine }}
AccountingStorageType=accounting_storage/slurmdbd
#AccountingStorageUser=slurm
AccountingStoreJobComment=YES
AccountingStorageEnforce={{ slurm_accounting_storage_enforce }}
JobAcctGatherType=jobacct_gather/linux
JobAcctGatherFrequency=30
{% else %}
AccountingStorageType=accounting_storage/none
AccountingStoreJobComment=YES
JobAcctGatherType=jobacct_gather/none
{% endif %}
 
# 
# TIMERS 
#BatchStartTimeout=10 
#CompleteWait=0 
#EpilogMsgTime=2000 
#GetEnvTimeout=2 
#HealthCheckInterval=0 
#HealthCheckProgram= 
#MessageTimeout=10 
#ResvOverRun=0 
#OverTimeLimit=0 
#UnkillableStepTimeout=60 
#VSizeFactor=0 

# POWER SAVE SUPPORT FOR IDLE NODES (optional) 
#SuspendProgram= 
#ResumeProgram= 
#SuspendTimeout= 
#ResumeTimeout= 
#ResumeRate= 
#SuspendExcNodes= 
#SuspendExcParts= 
#SuspendRate= 
#SuspendTime= 

#
# MISC
#GroupUpdateForce=0 
#GroupUpdateTime=600 
#JobRequeue=1 
#JobSubmitPlugins=1 
#KillOnBadExit=0 
#LaunchType=launch/slurm 
#Licenses=foo*4,bar 
#MailProg=/bin/mail 
#MpiParams=ports=#-# 
#PrivateData=jobs 
#RebootProgram= 

# 
# COMPUTE NODES 
{% for item in slurm_compute_nodes %}
NodeName={{ item.NodeName }} CPUs={{ item.CPUs }} Boards={{ item.Boards }} SocketsPerBoard={{ item.SocketsPerBoard }} CoresPerSocket={{ item.CoresPerSocket }} ThreadsPerCore={{ item.ThreadsPerCore }} RealMemory={{ item.RealMemory }}
{% endfor %}

# Partitions
#
{% for item in slurm_partitions %}
PartitionName={{ item.PartitionName }} Nodes={{ item.Nodes }} Default={{ item.Default }} MaxTime={{ item.MaxTime }} State={{ item.State }}
{% endfor %}
