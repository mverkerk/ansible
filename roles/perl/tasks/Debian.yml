---
- name: Include build role
  include_role:
    name: build

# Preparations
- name: "Install Perl depended packages"
  apt:
    name: "{{ packages }}"
    state: latest

# Compilation & Installing
- name: Check for Perl installation @ {{ perl_install_dest }}
  stat: path={{ perl_install_dest }}/{{ perl_prefix }}
  register: perl_installed

- name: "Copy and extract the Perl src package, configure, make and install Perl.."
  block:
    - unarchive:
        src: "files/{{ perl_prefix }}.{{ perl_archive }}"
        dest: /tmp
      when: perl_one_installation is not defined or inventory_hostname == perl_one_installation
    - command: "./Configure -des -Dprefix={{ perl_install_dest }}/{{ perl_prefix }} {{ perl_configure_flags | join(' ') }}"
      args:
        chdir: /tmp/{{ perl_prefix }}
      when: perl_one_installation is not defined or inventory_hostname == perl_one_installation
    - make:
        chdir: /tmp/{{ perl_prefix }}
      when: perl_one_installation is not defined or inventory_hostname == perl_one_installation
    - make:
        chdir: /tmp/{{ perl_prefix }}
        target: test
      ignore_errors: yes
      register: perltest
      when: perl_one_installation is not defined or inventory_hostname == perl_one_installation
    - copy: content={{ perltest }} dest=/tmp/{{ perl_prefix }}-make-test.log
      when: perl_one_installation is not defined or inventory_hostname == perl_one_installation
    - make:
        chdir: /tmp/{{ perl_prefix }}
        target: install
      become: yes
      when: perl_one_installation is not defined or inventory_hostname == perl_one_installation
  when: not perl_installed.stat.exists

- name: "Check if link exists.."
  stat: "path={{ perl_linkdir }}"
  register: perl_linked

- name: "Create link.."
  file:
    src: "{{ perl_install_dest}}/{{ perl_prefix }}"
    dest: "{{ perl_linkdir }}"
    state: link
  ignore_errors: yes                                 #Taking a small risk here - this config should allow overlapping links and different links per node
  when: perl_dolink and not perl_linked.stat.exists

# Configuring Perl man directories

- name: "Set perl MANDATORY_MANPATH"
  lineinfile:
    path: /etc/manpath.config
    regexp: 'MANDATORY_MANPATH                       {{ perl_linkdir }}/share/man'
    insertafter: '^MANDATORY_MANPATH'
    line: 'MANDATORY_MANPATH                       {{ perl_linkdir }}/share/man'
    state: present

- name: "Set perl bin MANPATH_MAP"
  lineinfile:
    path: /etc/manpath.config
    regexp: 'MANPATH_MAP     {{ perl_linkdir }}/bin          {{ perl_linkdir }}/share/man'
    insertafter: '^MANPATH_MAP'
    line: 'MANPATH_MAP     {{ perl_linkdir }}/bin          {{ perl_linkdir }}/share/man'
    state: present

- name: "Run mandb to reconfigure man databases"
  command: mandb

# Set Perl settings with file in profile.d)
- name: "Create profile.d files with PATH info"
  template:
    src: perl.sh.Debian.j2
    dest: /etc/profile.d/perl.sh
    owner: root
    group: root
    mode: 0644

- name: "Install CPANM"
  command: "{{ perl_linkdir }}/bin/cpan install App::cpanminus"
  args:
    creates: "{{ perl_linkdir }}/bin/cpanm"
  environment:
    PERL_MM_USE_DEFAULT: 1
    PERL_BASE: "{{ perl_install_dest }}/{{ perl_prefix }}"
  when: perl_one_installation is not defined or inventory_hostname == perl_one_installation

- name: "Install OS packages for additional perl modules"
  apt:
    name: "{{ perl_packages_os_dependencies }}"
    state: latest

- block:
  - name: "Install additional Perl modules"
    cpanm:
      executable: "{{ perl_linkdir }}/bin/cpanm"
      name: "{{ item }}"
    loop: "{{ perl_packages }}"
    ignore_errors: yes
    register: instperlpackages
  - copy: content={{ instperlpackages }} dest=/tmp/{{ perl_prefix }}-inst-packages.log
  when: perl_packages is defined and ( perl_one_installation is not defined or inventory_hostname == perl_one_installation )
